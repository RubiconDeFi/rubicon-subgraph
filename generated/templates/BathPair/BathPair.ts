// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogStrategistTrade extends ethereum.Event {
  get params(): LogStrategistTrade__Params {
    return new LogStrategistTrade__Params(this);
  }
}

export class LogStrategistTrade__Params {
  _event: LogStrategistTrade;

  constructor(event: LogStrategistTrade) {
    this._event = event;
  }

  get askId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get askAmt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidAmt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get strategist(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class StrategistRewardClaim extends ethereum.Event {
  get params(): StrategistRewardClaim__Params {
    return new StrategistRewardClaim__Params(this);
  }
}

export class StrategistRewardClaim__Params {
  _event: StrategistRewardClaim;

  constructor(event: StrategistRewardClaim) {
    this._event = event;
  }

  get strategist(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountOfReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BathPair__outstandingPairIDsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class BathPair extends ethereum.SmartContract {
  static bind(address: Address): BathPair {
    return new BathPair("BathPair", address);
  }

  RubiconMarketAddress(): Address {
    let result = super.call(
      "RubiconMarketAddress",
      "RubiconMarketAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_RubiconMarketAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "RubiconMarketAddress",
      "RubiconMarketAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bathAssetAddress(): Address {
    let result = super.call(
      "bathAssetAddress",
      "bathAssetAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bathAssetAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bathAssetAddress",
      "bathAssetAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bathHouse(): Address {
    let result = super.call("bathHouse", "bathHouse():(address)", []);

    return result[0].toAddress();
  }

  try_bathHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall("bathHouse", "bathHouse():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bathQuoteAddress(): Address {
    let result = super.call(
      "bathQuoteAddress",
      "bathQuoteAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bathQuoteAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bathQuoteAddress",
      "bathQuoteAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxOrderSize(asset: Address, bathTokenAddress: Address): BigInt {
    let result = super.call(
      "getMaxOrderSize",
      "getMaxOrderSize(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(bathTokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMaxOrderSize(
    asset: Address,
    bathTokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxOrderSize",
      "getMaxOrderSize(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(bathTokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOutstandingPairCount(): BigInt {
    let result = super.call(
      "getOutstandingPairCount",
      "getOutstandingPairCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOutstandingPairCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOutstandingPairCount",
      "getOutstandingPairCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSearchRadius(): BigInt {
    let result = super.call(
      "getSearchRadius",
      "getSearchRadius():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSearchRadius(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSearchRadius",
      "getSearchRadius():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getThisBathAsset(): Address {
    let result = super.call(
      "getThisBathAsset",
      "getThisBathAsset():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getThisBathAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getThisBathAsset",
      "getThisBathAsset():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getThisBathQuote(): Address {
    let result = super.call(
      "getThisBathQuote",
      "getThisBathQuote():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getThisBathQuote(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getThisBathQuote",
      "getThisBathQuote():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxOrderSizeBPS(): BigInt {
    let result = super.call(
      "maxOrderSizeBPS",
      "maxOrderSizeBPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxOrderSizeBPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxOrderSizeBPS",
      "maxOrderSizeBPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  outstandingPairIDs(param0: BigInt): BathPair__outstandingPairIDsResult {
    let result = super.call(
      "outstandingPairIDs",
      "outstandingPairIDs(uint256):(uint256,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BathPair__outstandingPairIDsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_outstandingPairIDs(
    param0: BigInt
  ): ethereum.CallResult<BathPair__outstandingPairIDsResult> {
    let result = super.tryCall(
      "outstandingPairIDs",
      "outstandingPairIDs(uint256):(uint256,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BathPair__outstandingPairIDsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  strategist2FillsAsset(param0: Address): BigInt {
    let result = super.call(
      "strategist2FillsAsset",
      "strategist2FillsAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_strategist2FillsAsset(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "strategist2FillsAsset",
      "strategist2FillsAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strategist2FillsQuote(param0: Address): BigInt {
    let result = super.call(
      "strategist2FillsQuote",
      "strategist2FillsQuote(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_strategist2FillsQuote(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "strategist2FillsQuote",
      "strategist2FillsQuote(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingAsset(): Address {
    let result = super.call(
      "underlyingAsset",
      "underlyingAsset():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_underlyingAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingAsset",
      "underlyingAsset():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingQuote(): Address {
    let result = super.call(
      "underlyingQuote",
      "underlyingQuote():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_underlyingQuote(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingQuote",
      "underlyingQuote():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BathScrubCall extends ethereum.Call {
  get inputs(): BathScrubCall__Inputs {
    return new BathScrubCall__Inputs(this);
  }

  get outputs(): BathScrubCall__Outputs {
    return new BathScrubCall__Outputs(this);
  }
}

export class BathScrubCall__Inputs {
  _call: BathScrubCall;

  constructor(call: BathScrubCall) {
    this._call = call;
  }
}

export class BathScrubCall__Outputs {
  _call: BathScrubCall;

  constructor(call: BathScrubCall) {
    this._call = call;
  }
}

export class ExecuteStrategyCall extends ethereum.Call {
  get inputs(): ExecuteStrategyCall__Inputs {
    return new ExecuteStrategyCall__Inputs(this);
  }

  get outputs(): ExecuteStrategyCall__Outputs {
    return new ExecuteStrategyCall__Outputs(this);
  }
}

export class ExecuteStrategyCall__Inputs {
  _call: ExecuteStrategyCall;

  constructor(call: ExecuteStrategyCall) {
    this._call = call;
  }

  get askNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get askDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bidNumerator(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get bidDenominator(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ExecuteStrategyCall__Outputs {
  _call: ExecuteStrategyCall;

  constructor(call: ExecuteStrategyCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _bathAssetAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bathQuoteAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bathHouse(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _maxOrderSizeBPS(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _shapeCoefNum(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class SetMaxOrderSizeBPSCall extends ethereum.Call {
  get inputs(): SetMaxOrderSizeBPSCall__Inputs {
    return new SetMaxOrderSizeBPSCall__Inputs(this);
  }

  get outputs(): SetMaxOrderSizeBPSCall__Outputs {
    return new SetMaxOrderSizeBPSCall__Outputs(this);
  }
}

export class SetMaxOrderSizeBPSCall__Inputs {
  _call: SetMaxOrderSizeBPSCall;

  constructor(call: SetMaxOrderSizeBPSCall) {
    this._call = call;
  }

  get val(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMaxOrderSizeBPSCall__Outputs {
  _call: SetMaxOrderSizeBPSCall;

  constructor(call: SetMaxOrderSizeBPSCall) {
    this._call = call;
  }
}

export class SetSearchRadiusCall extends ethereum.Call {
  get inputs(): SetSearchRadiusCall__Inputs {
    return new SetSearchRadiusCall__Inputs(this);
  }

  get outputs(): SetSearchRadiusCall__Outputs {
    return new SetSearchRadiusCall__Outputs(this);
  }
}

export class SetSearchRadiusCall__Inputs {
  _call: SetSearchRadiusCall;

  constructor(call: SetSearchRadiusCall) {
    this._call = call;
  }

  get val(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSearchRadiusCall__Outputs {
  _call: SetSearchRadiusCall;

  constructor(call: SetSearchRadiusCall) {
    this._call = call;
  }
}

export class SetShapeCoefNumCall extends ethereum.Call {
  get inputs(): SetShapeCoefNumCall__Inputs {
    return new SetShapeCoefNumCall__Inputs(this);
  }

  get outputs(): SetShapeCoefNumCall__Outputs {
    return new SetShapeCoefNumCall__Outputs(this);
  }
}

export class SetShapeCoefNumCall__Inputs {
  _call: SetShapeCoefNumCall;

  constructor(call: SetShapeCoefNumCall) {
    this._call = call;
  }

  get val(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetShapeCoefNumCall__Outputs {
  _call: SetShapeCoefNumCall;

  constructor(call: SetShapeCoefNumCall) {
    this._call = call;
  }
}

export class StrategistBootyClaimCall extends ethereum.Call {
  get inputs(): StrategistBootyClaimCall__Inputs {
    return new StrategistBootyClaimCall__Inputs(this);
  }

  get outputs(): StrategistBootyClaimCall__Outputs {
    return new StrategistBootyClaimCall__Outputs(this);
  }
}

export class StrategistBootyClaimCall__Inputs {
  _call: StrategistBootyClaimCall;

  constructor(call: StrategistBootyClaimCall) {
    this._call = call;
  }
}

export class StrategistBootyClaimCall__Outputs {
  _call: StrategistBootyClaimCall;

  constructor(call: StrategistBootyClaimCall) {
    this._call = call;
  }
}
